//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 11 storyboards.
  struct storyboard {
    /// Storyboard `AddAlarm`.
    static let addAlarm = _R.storyboard.addAlarm()
    /// Storyboard `Alarm`.
    static let alarm = _R.storyboard.alarm()
    /// Storyboard `CreateRoomSetIcon`.
    static let createRoomSetIcon = _R.storyboard.createRoomSetIcon()
    /// Storyboard `CreateRoom`.
    static let createRoom = _R.storyboard.createRoom()
    /// Storyboard `JoinRoom`.
    static let joinRoom = _R.storyboard.joinRoom()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Ranking`.
    static let ranking = _R.storyboard.ranking()
    /// Storyboard `RegisterIcon`.
    static let registerIcon = _R.storyboard.registerIcon()
    /// Storyboard `RegisterName`.
    static let registerName = _R.storyboard.registerName()
    /// Storyboard `RoomSettings`.
    static let roomSettings = _R.storyboard.roomSettings()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddAlarm", bundle: ...)`
    static func addAlarm(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addAlarm)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Alarm", bundle: ...)`
    static func alarm(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.alarm)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CreateRoom", bundle: ...)`
    static func createRoom(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createRoom)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CreateRoomSetIcon", bundle: ...)`
    static func createRoomSetIcon(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createRoomSetIcon)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "JoinRoom", bundle: ...)`
    static func joinRoom(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.joinRoom)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Ranking", bundle: ...)`
    static func ranking(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ranking)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RegisterIcon", bundle: ...)`
    static func registerIcon(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registerIcon)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RegisterName", bundle: ...)`
    static func registerName(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registerName)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RoomSettings", bundle: ...)`
    static func roomSettings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.roomSettings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")

    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 17 images.
  struct image {
    /// Image `add-photo`.
    static let addPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-photo")
    /// Image `adduser`.
    static let adduser = Rswift.ImageResource(bundle: R.hostingBundle, name: "adduser")
    /// Image `alarm-30`.
    static let alarm30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "alarm-30")
    /// Image `alarm-45`.
    static let alarm45 = Rswift.ImageResource(bundle: R.hostingBundle, name: "alarm-45")
    /// Image `arrow-60`.
    static let arrow60 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-60")
    /// Image `clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock")
    /// Image `crown-30`.
    static let crown30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "crown-30")
    /// Image `crown-45`.
    static let crown45 = Rswift.ImageResource(bundle: R.hostingBundle, name: "crown-45")
    /// Image `delete-45`.
    static let delete45 = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete-45")
    /// Image `group-45`.
    static let group45 = Rswift.ImageResource(bundle: R.hostingBundle, name: "group-45")
    /// Image `menuー-45`.
    static let menuー45 = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuー-45")
    /// Image `notification-96`.
    static let notification96 = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification-96")
    /// Image `qrcode-96`.
    static let qrcode96 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode-96")
    /// Image `search-96`.
    static let search96 = Rswift.ImageResource(bundle: R.hostingBundle, name: "search-96")
    /// Image `settings-30`.
    static let settings30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-30")
    /// Image `settings-45`.
    static let settings45 = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-45")
    /// Image `user-45`.
    static let user45 = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-45")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add-photo", bundle: ..., traitCollection: ...)`
    static func addPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addPhoto, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "adduser", bundle: ..., traitCollection: ...)`
    static func adduser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.adduser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alarm-30", bundle: ..., traitCollection: ...)`
    static func alarm30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alarm30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alarm-45", bundle: ..., traitCollection: ...)`
    static func alarm45(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alarm45, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-60", bundle: ..., traitCollection: ...)`
    static func arrow60(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow60, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crown-30", bundle: ..., traitCollection: ...)`
    static func crown30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crown30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crown-45", bundle: ..., traitCollection: ...)`
    static func crown45(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crown45, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete-45", bundle: ..., traitCollection: ...)`
    static func delete45(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete45, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "group-45", bundle: ..., traitCollection: ...)`
    static func group45(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group45, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menuー-45", bundle: ..., traitCollection: ...)`
    static func menuー45(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuー45, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification-96", bundle: ..., traitCollection: ...)`
    static func notification96(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification96, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrcode-96", bundle: ..., traitCollection: ...)`
    static func qrcode96(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode96, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search-96", bundle: ..., traitCollection: ...)`
    static func search96(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search96, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-30", bundle: ..., traitCollection: ...)`
    static func settings30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-45", bundle: ..., traitCollection: ...)`
    static func settings45(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings45, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user-45", bundle: ..., traitCollection: ...)`
    static func user45(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user45, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `AlarmTableViewCell`.
    static let alarmTableViewCell = _R.nib._AlarmTableViewCell()
    /// Nib `RankingTableViewCell`.
    static let rankingTableViewCell = _R.nib._RankingTableViewCell()
    /// Nib `WakeUpResult`.
    static let wakeUpResult = _R.nib._WakeUpResult()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AlarmTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.alarmTableViewCell) instead")
    static func alarmTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.alarmTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RankingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.rankingTableViewCell) instead")
    static func rankingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rankingTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WakeUpResult", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.wakeUpResult) instead")
    static func wakeUpResult(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wakeUpResult)
    }
    #endif

    static func alarmTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AlarmTableViewCell? {
      return R.nib.alarmTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlarmTableViewCell
    }

    static func rankingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RankingTableViewCell? {
      return R.nib.rankingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RankingTableViewCell
    }

    static func wakeUpResult(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.wakeUpResult.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AlarmCell`.
    static let alarmCell: Rswift.ReuseIdentifier<AlarmTableViewCell> = Rswift.ReuseIdentifier(identifier: "AlarmCell")
    /// Reuse identifier `RankingCell`.
    static let rankingCell: Rswift.ReuseIdentifier<RankingTableViewCell> = Rswift.ReuseIdentifier(identifier: "RankingCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AlarmTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AlarmTableViewCell

      let bundle = R.hostingBundle
      let identifier = "AlarmCell"
      let name = "AlarmTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AlarmTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlarmTableViewCell
      }

      fileprivate init() {}
    }

    struct _RankingTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RankingTableViewCell

      let bundle = R.hostingBundle
      let identifier = "RankingCell"
      let name = "RankingTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RankingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RankingTableViewCell
      }

      fileprivate init() {}
    }

    struct _WakeUpResult: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WakeUpResult"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try addAlarm.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try alarm.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try createRoom.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try createRoomSetIcon.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try joinRoom.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try ranking.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try registerIcon.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try registerName.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try roomSettings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct addAlarm: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AddAlarmViewController

      let addAlarm = StoryboardViewControllerResource<AddAlarmViewController>(identifier: "AddAlarm")
      let bundle = R.hostingBundle
      let name = "AddAlarm"

      func addAlarm(_: Void = ()) -> AddAlarmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addAlarm)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addAlarm().addAlarm() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addAlarm' could not be loaded from storyboard 'AddAlarm' as 'AddAlarmViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct alarm: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AlarmsViewController

      let alarm = StoryboardViewControllerResource<AlarmsViewController>(identifier: "Alarm")
      let bundle = R.hostingBundle
      let name = "Alarm"

      func alarm(_: Void = ()) -> AlarmsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alarm)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.alarm().alarm() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alarm' could not be loaded from storyboard 'Alarm' as 'AlarmsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct createRoom: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CreateRoom"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct createRoomSetIcon: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CreateRoomSetIcon"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct joinRoom: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "JoinRoom"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct ranking: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RankingViewController

      let bundle = R.hostingBundle
      let name = "Ranking"
      let ranking = StoryboardViewControllerResource<RankingViewController>(identifier: "Ranking")

      func ranking(_: Void = ()) -> RankingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ranking)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.ranking().ranking() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ranking' could not be loaded from storyboard 'Ranking' as 'RankingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct registerIcon: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "RegisterIcon"
      let registerIcon = StoryboardViewControllerResource<RegisterIconViewController>(identifier: "RegisterIcon")

      func registerIcon(_: Void = ()) -> RegisterIconViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerIcon)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.registerIcon().registerIcon() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerIcon' could not be loaded from storyboard 'RegisterIcon' as 'RegisterIconViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct registerName: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "RegisterName"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct roomSettings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RoomSettings"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingsViewController

      let bundle = R.hostingBundle
      let name = "Settings"
      let settings = StoryboardViewControllerResource<SettingsViewController>(identifier: "Settings")

      func settings(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settings)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.settings().settings() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settings' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
